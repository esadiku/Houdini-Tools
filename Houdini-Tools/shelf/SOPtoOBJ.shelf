<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <!-- This file contains definitions of shelves, toolbars, and tools.
 It should not be hand-edited when it is being used by the application.
 Note, that two definitions of the same element are not allowed in
 a single file. -->

  <tool name="Sop_to_up_level" label="Sop to OBJ" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[import hou
from PySide2 import QtWidgets, QtCore, QtGui

class NameDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(NameDialog, self).__init__(parent)
        self.setWindowTitle("Create New Node")
        self.setMinimumWidth(350)

        self.label = QtWidgets.QLabel("Name to Obj Scene:")
        self.line_edit = QtWidgets.QLineEdit()
        self.line_edit.installEventFilter(self)

        self.color_label = QtWidgets.QLabel("Selected color:")
        self.color_display = QtWidgets.QLabel()
        self.color_display.setFixedSize(50, 20)

        self.chosen_color = QtGui.QColor(179, 38, 38)
        self.color_display.setStyleSheet("background-color: rgb(179, 38, 38);")

        self.color_button = QtWidgets.QPushButton("Pick Color")
        self.color_button.clicked.connect(self.pick_color)

        self.ok_button = QtWidgets.QPushButton("OK")
        self.cancel_button = QtWidgets.QPushButton("Cancel")
        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)

        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.line_edit)

        color_layout = QtWidgets.QHBoxLayout()
        color_layout.addWidget(self.color_label)
        color_layout.addWidget(self.color_display)
        color_layout.addWidget(self.color_button)
        layout.addLayout(color_layout)

        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addWidget(self.ok_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)

        self.setLayout(layout)

    def pick_color(self):
        color = QtWidgets.QColorDialog.getColor(self.chosen_color, self, "Choose Node Color")
        if color.isValid():
            self.chosen_color = color
            self.color_display.setStyleSheet(f"background-color: {color.name()};")

    def eventFilter(self, obj, event):
        if obj == self.line_edit and event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Space:
                cursor_pos = self.line_edit.cursorPosition()
                text = self.line_edit.text()
                text = text[:cursor_pos] + "_" + text[cursor_pos:]
                self.line_edit.setText(text)
                self.line_edit.setCursorPosition(cursor_pos + 1)
                return True
        return super(NameDialog, self).eventFilter(obj, event)

def create_custom_node():
    dialog = NameDialog(hou.ui.mainQtWindow())
    if dialog.exec_() == QtWidgets.QDialog.Accepted:
        node_name = dialog.line_edit.text().strip()
        if not node_name:
            node_name = "New_RND"

        selected = hou.selectedNodes()
        root = hou.node("/obj")
        container = root.createNode("geo", node_name)

        color = dialog.chosen_color
        container.setColor(hou.Color((color.redF(), color.greenF(), color.blueF())))

        merge = container.createNode("object_merge", "Out")
        merge.parm("numobj").set(0)
        merge.parm("xformtype").set("local")

        for node in selected:
            i = merge.evalParm("numobj") + 1
            current_path = "objpath" + str(i)
            merge.parm("numobj").set(i)
            merge.parm(current_path).set(node.path())

        container.layoutChildren()

create_custom_node()
]]></script>
  </tool>
</shelfDocument>
