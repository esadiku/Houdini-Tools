<?xml version="1.0" encoding="UTF-8"?>
<shelfDocument>
  <toolshelf name="HoudiniTools" label="Houdini Tools">
    <memberTool name="Sop_to_up_level"/>
    <memberTool name="Null_Tool"/>
    <memberTool name="WireTool"/>
    <memberTool name="OBJ_Merge"/>
  </toolshelf>

  <tool name="Sop_to_up_level" label="Sop to OBJ" icon="OBJ_geo">
    <script scriptType="python"><![CDATA[
import hou
from PySide2 import QtWidgets, QtCore, QtGui

class NameDialog(QtWidgets.QDialog):
    def __init__(self, parent=None):
        super(NameDialog, self).__init__(parent)
        self.setWindowTitle("Create New Node")
        self.setMinimumWidth(350)
        self.label = QtWidgets.QLabel("Name to Obj Scene:")
        self.line_edit = QtWidgets.QLineEdit()
        self.line_edit.installEventFilter(self)
        self.color_label = QtWidgets.QLabel("Selected color:")
        self.color_display = QtWidgets.QLabel()
        self.color_display.setFixedSize(50, 20)
        self.chosen_color = QtGui.QColor(179, 38, 38)
        self.color_display.setStyleSheet("background-color: rgb(179, 38, 38);")
        self.color_button = QtWidgets.QPushButton("Pick Color")
        self.color_button.clicked.connect(self.pick_color)
        self.ok_button = QtWidgets.QPushButton("OK")
        self.cancel_button = QtWidgets.QPushButton("Cancel")
        self.ok_button.clicked.connect(self.accept)
        self.cancel_button.clicked.connect(self.reject)
        layout = QtWidgets.QVBoxLayout()
        layout.addWidget(self.label)
        layout.addWidget(self.line_edit)
        color_layout = QtWidgets.QHBoxLayout()
        color_layout.addWidget(self.color_label)
        color_layout.addWidget(self.color_display)
        color_layout.addWidget(self.color_button)
        layout.addLayout(color_layout)
        button_layout = QtWidgets.QHBoxLayout()
        button_layout.addWidget(self.ok_button)
        button_layout.addWidget(self.cancel_button)
        layout.addLayout(button_layout)
        self.setLayout(layout)

    def pick_color(self):
        color = QtWidgets.QColorDialog.getColor(self.chosen_color, self, "Choose Node Color")
        if color.isValid():
            self.chosen_color = color
            self.color_display.setStyleSheet(f"background-color: {color.name()};")

    def eventFilter(self, obj, event):
        if obj == self.line_edit and event.type() == QtCore.QEvent.KeyPress:
            if event.key() == QtCore.Qt.Key_Space:
                cursor_pos = self.line_edit.cursorPosition()
                text = self.line_edit.text()
                text = text[:cursor_pos] + "_" + text[cursor_pos:]
                self.line_edit.setText(text)
                self.line_edit.setCursorPosition(cursor_pos + 1)
                return True
        return super(NameDialog, self).eventFilter(obj, event)

def create_custom_node():
    dialog = NameDialog(hou.ui.mainQtWindow())
    if dialog.exec_() == QtWidgets.QDialog.Accepted:
        node_name = dialog.line_edit.text().strip()
        if not node_name:
            node_name = "New_RND"
        selected = hou.selectedNodes()
        root = hou.node("/obj")
        container = root.createNode("geo", node_name)
        color = dialog.chosen_color
        container.setColor(hou.Color((color.redF(), color.greenF(), color.blueF())))
        merge = container.createNode("object_merge", "Out")
        merge.parm("numobj").set(0)
        merge.parm("xformtype").set("local")
        for node in selected:
            i = merge.evalParm("numobj") + 1
            current_path = "objpath" + str(i)
            merge.parm("numobj").set(i)
            merge.parm(current_path).set(node.path())
        container.layoutChildren()

create_custom_node()
]]></script>
  </tool>

  <tool name="Null_Tool" label="Null Tool" icon="SOP_null">
    <script scriptType="python"><![CDATA[
node = hou.pwd()
for i in hou.selectedNodes():
    dir = i.parent().path() + '/'
    otherName = hou.ui.readInput('Name the null', buttons=('Yes', 'No'), initial_contents='')[1]
    otherName = otherName.upper()
    nullnode = hou.node('/%s'%dir).createNode('null', 'OUT_%s'%otherName)
    selNodePos = i.position()    
    nullnode.setColor(hou.Color([0, 0, 0]))
    nullnode.setPosition(hou.Vector2(selNodePos[0], selNodePos[1]-1))
    nullnode.setInput(0, i)
    i.setSelected(False)
    nullnode.setSelected(True)
    try:
        nullnode.setDisplayFlag(True)
        nullnode.setRenderFlag(True)
    except:
        nullnode.setDisplayFlag(True)
]]></script>
  </tool>

  <tool name="WireTool" label="Wire Tool" icon="SOP_merge">
    <script scriptType="python"><![CDATA[
import hou
import nodegraph

def getRunning(): return hou.session.scRunning
def setRunning(input): hou.session.scRunning = input
def getLast(): return hou.session.scLastNode
def setLast(node): hou.session.scLastNode = node
def getCurrent(): return hou.session.scCurrentNode
def setCurrent(node): hou.session.scCurrentNode = node

def initVariables():
    hou.ui.removeAllSelectionCallbacks()
    hou.session.scRunning = None
    hou.session.scCurrentNode = None
    hou.session.scLastNode = None
    hou.ui.addSelectionCallback(selectionCallback)
    setRunning(1)

def selectionCallback(selection):
    try:
        if len(selection) > 0:
            if getCurrent() != None: setLast(getCurrent())
            setCurrent(selection)
    except:
        print("An Selection exception occurred")

def connectByHeight(node1, node2):
    if sameParents(node1, node2):
        if node1.position()[1]>node2.position()[1]:
            setCurrent([node2])
            setLast([node1])
        else:
            setCurrent([node1])
            setLast([node2])
        connectByLastSelection()

def sameParents(node1, node2):
    return node1.parent().name() == node2.parent().name()

def connectByLastSelection():
    last = getLast()[0]
    current = getCurrent()[0]
    if last != None and current != None:
        if sameParents(last, current):
            if len(last.outputConnectors())>0 and len(current.inputConnectors())>0:
                pos = switchInput(current, last)
                current.setInput(pos, last, 0)

def switchInput(current, last):
    found=-1
    for ele in current.inputConnections():
        if ele.inputNode().name() == last.name():
            found = ele.inputIndex()
            current.setInput(found, None, 0)
            if len(current.inputConnectors())>=found+2: found += 1
            else: found = 0
            break
    if found<0: found = 0
    return found

if kwargs['ctrlclick'] or kwargs['cmdclick']:
    initVariables()
else:
    try:
        if getRunning():
            if len(getCurrent())>1: connectByHeight(getCurrent()[0], getCurrent()[1])
            else: connectByLastSelection()
        else: initVariables()
    except:
        initVariables()
]]></script>
  </tool>

  <tool name="OBJ_Merge" label="Object Merge" icon="SOP_object_merge">
    <script scriptType="python"><![CDATA[
import hou
netEditor = hou.ui.paneTabOfType(hou.paneTabType.NetworkEditor)
count = 0
for tNode in hou.selectedNodes():
    tPath = tNode.path()
    tRoot = tPath.split("/")[1]
    tName = "_"+tNode.name() + "_"
    if tRoot=="obj" and len(tPath.split("/"))>2:
        nNode = tNode.parent().createNode("object_merge", node_name=tName)
        tPos = netEditor.cursorPosition()  
        nNode.setPosition([tPos[0]+(0.1*count), tPos[1]+(-0.75*count)])
        nNode.parm("objpath1").set(tPath)
        nNode.parm("xformtype").set(1)
        count+=1
]]></script>
  </tool>

</shelfDocument>

